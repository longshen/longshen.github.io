<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[longshen]]></title>
  <link href="http://longshen.github.io/atom.xml" rel="self"/>
  <link href="http://longshen.github.io/"/>
  <updated>2016-01-03T20:47:53+08:00</updated>
  <id>http://longshen.github.io/</id>
  <author>
    <name><![CDATA[longshen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2015年度总结]]></title>
    <link href="http://longshen.github.io/blog/2016/01/03/2015-summary/"/>
    <updated>2016-01-03T16:34:17+08:00</updated>
    <id>http://longshen.github.io/blog/2016/01/03/2015-summary</id>
    <content type="html"><![CDATA[<p>又是新的一年，抽时间对过去的2015年在工作方面的进展做个简单的总结。2015年是苦逼的一年，也是成长的一年。从最开始共同负责项目，到独立负责项目；从只支持一个业务，到做成平台同时支持十来个公司内外的业务。无论是团队管理，项目管理，还是业务支撑，个人技术上都有所提升。</p>

<ul>
<li><p><strong>团队管理方面</strong></p>

<p><!--虽然从2014年就开始负责部分团队和项目的工作，但是由于有以前的leader，我基本只需要做团队管理中的部分轻松的工作。比如结合项目发展方向来考虑和沟通成员的发展方向；时常组织团队活动；定期与成员做沟通等等。
2015年4月份开始独立负责团队和项目，仍延续之前重点关注团队个人成长与发展，但慢慢的发现，团队发展方向模糊，团队只是延续着做着之前的工作。但是个人忙于处理日常业务事务，没重点考虑规划团队发展。团队陆续出现已在团队较长时间的骨干成员在团队中遇到发展瓶颈，部分骨干成员离去。虽然后续通过招聘和团队成员的培养弥补人才空缺，但是团队发展方向依旧未明朗。到年底才逐渐清晰，团队将专注于数据传输，扩展数据传输相关的业务，包括更多的客户端、服务器一体化方案。--></p>

<p>从最开始只关注团队个人成长与发展，经历骨干人才的流失。到重视团队发展方向，招聘人才、培养构建人才梯队。</p>

<p>团队管理需要同时明确团队发展方向与考虑成员个人发展。只明确团队发展方向，成员个人发展很容易与团队发展方向冲突；只考虑成员个人发展，短期发展问题不大，但是长期发展容易出现瓶颈。</p></li>
<li><p><strong>项目管理方面</strong></p>

<p>经过一年的实践与总结，理解并积累更多的项目管理工具，如<a href="http://longshen.github.io/blog/2015/11/16/file-syn-seafile/">Seafile</a>、Confluence、Worktitle等。对项目计划与执行，有了更深的理解，同时总结了一些方法，包括执行路线管理的方法、团队协作方法等。进一步体会到数据的重要性，<a href="http://longshen.github.io/blog/2015/11/28/data-driven-business/">总结数据驱动业务的经验</a>。</p></li>
<li><p><strong>产品业务方面</strong></p>

<p>  从只支持一个业务，到做成平台同时支持十来个公司内外的业务。对数据传输相关业务有深入的理解，挖掘出在下载领域P2SP技术能带来的各种价值。通过和公司内外各业务线的产品、技术、商务负责人交流，更加熟悉产品项目的运营、商务合作等方方面面，支撑业务的方法也更加成熟。</p></li>
<li><p><strong>技术方面</strong></p>

<p>  这时最重要的方面，但过去的一年，自己的提升非常有限。主要是总结已有的技术，包括p2sp下载技术、android网络通信、可靠传输协议等网络通信方面的技术。而新吸收的技术较少。</p>

<p>  新的一年，需要重点提升技术能力。将重点积累服务器开发相关的技术，深入研究android系统。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac下载android源码]]></title>
    <link href="http://longshen.github.io/blog/2015/12/12/download-android-source-on-mac-os/"/>
    <updated>2015-12-12T11:27:08+08:00</updated>
    <id>http://longshen.github.io/blog/2015/12/12/download-android-source-on-mac-os</id>
    <content type="html"><![CDATA[<p>下载android源码大致可以分为4个步骤：
* 新建硬盘镜像
* 安装JDK
* 安装相关依赖工具和Repo
* 下载源码
建议结合官网<a href="http://source.android.com/source/initializing.html#setting-up-a-mac-os-x-build-environment">Setting up a Mac OS build environment</a>和<a href="http://source.android.com/source/downloading.html">Downloading the Source</a>阅读。</p>

<h2>一、新建硬盘镜像</h2>

<p>打开磁盘工具（应用程序/实用工具/磁盘工具），选择文件->新建->新建空白映像。
<img src="http://longshen.github.io/media/14498910094346.jpg" alt="" /></p>

<p>大小：自定义40G以上，分区：单个分区-Apple分区图；映像格式：稀疏磁盘映像。</p>

<blockquote><p>其中自定义大小根据要下载编译的android版本而定，比如下载android5.1.1的代码就耗用40多G空间。加上后续编译，应该在60G以上。</p></blockquote>

<h2>二、安装JDK</h2>

<p><a href="http://blog.sina.com.cn/s/blog_63fea2670102uwpt.html">JDK版本切换</a></p>

<h2>三、安装相关依赖工具</h2>

<h3>安装MacPorts</h3>

<p>首先先安装MAC下的软件包管理工具MacPorts，从<a href="http://www.macports.org/install.php">www.macports.org</a>下载。</p>

<blockquote><p>MacPorts提供了快速的pkg安装方式。<strong>前提：</strong>需要安装XCode和Xcode Command Line Tools，并且同意XCode许可证。</p></blockquote>

<p>常用MacPorts命令</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#搜索索引中的软件</span>
</span><span class='line'>port search name
</span><span class='line'><span class="c">#安装新软件</span>
</span><span class='line'>sudo port install name
</span><span class='line'><span class="c">#卸载软件</span>
</span><span class='line'>sudo port uninstall name
</span></code></pre></td></tr></table></div></figure>


<h3>安装其他依赖包</h3>

<p>安装gmake、libsdl、git、gnupg包
执行<code>POSIXLY_CORRECT=1 sudo port -v install gmake libsdl git gnupg</code></p>

<p>安装后使用<code>make --version</code>查看make版本，如果为3.82版本，由于这个版本有bug，编译android会有问题，需要回退到3.81。</p>

<h3>安装repo</h3>

<p>下载repo
<code>curl https://dl-ssl.google.com/dl/googlesource/git-repo/repo &gt; ~/bin/repo</code>
修改repo权限
<code>chmoda +x ~/bin/repo</code></p>

<h2>四、下载android源码</h2>

<h3>初始化目录下的源码信息</h3>

<p><code>repo init -u [manifest的URL] -b [分支or某个修订]</code></p>

<p>比如 <code>repo init -u https://android.googlesource.com/platform/manifest -b android-5.1.1_r28</code></p>

<h3>同步代码</h3>

<p><code>repo sync</code></p>

<h3>出现error: Exited sync due to fetch errors解决方法</h3>

<p>1、使用<code>repo sync -f -j10</code>命令
2、增加循环重试</p>

<blockquote><p>其中 <code>repo sync -f -j10</code> 含义如下：
-f, &ndash;force-broken    continue sync even if a project fails to sync
-j JOBS, &ndash;jobs=JOBS  projects to fetch simultaneously (default 4)</p></blockquote>

<p>可使用以下脚本进行同步代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash </span>
</span><span class='line'><span class="nv">PATH</span><span class="o">=</span>~/bin:<span class="nv">$PATH</span>
</span><span class='line'>repo init -u https://android.googlesource.com/platform/manifest -b android-5.1.1_r28
</span><span class='line'>repo sync -f -j10
</span><span class='line'><span class="k">while</span> <span class="o">[</span> <span class="nv">$?</span> <span class="o">=</span> <span class="m">1</span> <span class="o">]</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;================sync failed, retry again =====&quot;</span>
</span><span class='line'>  sleep <span class="m">3</span>
</span><span class='line'>  repo sync -f -j10
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<h2>五、常见问题</h2>

<h3>安装MacPorts卡住</h3>

<p><strong>原因</strong>
可能刚开始没同意XCode许可证，导致一直pkg安装卡住</p>

<p><strong>解决方法</strong>
1. 使用MacPorts源码安装方式。
2. 同意XCode许可证，重启机器。再重新安装</p>

<h3>sudo: port: command not found</h3>

<p>执行<code>POSIXLY_CORRECT=1 sudo port -v install gmake libsdl git gnupg</code>
提示<code>sudo: port: command not found</code></p>

<p><strong>原因</strong>
port安装在
可参考<a href="http://chenall.net/post/linux-sudo-config/">linux sudo 命令和配置文件/etc/sudoers介绍</a></p>

<p><strong>解决方法</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo vim /etc/sudoers
</span><span class='line'><span class="c">#在secure_path加入/opt/local/bin</span>
</span><span class='line'>Defaults <span class="nv">secure_path</span><span class="o">=</span><span class="s2">&quot;/opt/local/bin:XXXX&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>六、参考</h2>

<p><a href="http://www.cnblogs.com/liuqxFuture/archive/2012/12/18/2823717.html">Mac下下载android4.2源码，进行源码调试</a></p>

<p><a href="http://blog.csdn.net/yangblocker/article/details/9673097">Mac OS X 10.8.4下Android4.2.2源码下载与编译</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据驱动业务_经验总结]]></title>
    <link href="http://longshen.github.io/blog/2015/11/28/data-driven-business/"/>
    <updated>2015-11-28T16:59:58+08:00</updated>
    <id>http://longshen.github.io/blog/2015/11/28/data-driven-business</id>
    <content type="html"><![CDATA[<blockquote><p>从2013年开始负责项目就开始尝试让数据驱动业务，但对于什么是数据驱动，如何用数据驱动业务都非常模糊。经过最近一年实践，对数据驱动业务有进一步的认识。对于专业的数据平台团队而言，这篇文章可能只是一个门外汉的一些见解；而对于非数据平台的业务团队，也许有一些可参考的。</p></blockquote>

<h2>一、什么是数据驱动</h2>

<p><strong>简单说就是拿数据说话，在产品开发的各个环节使用数据做决策。</strong>在产品设计初期，通过调研、问卷等获得用户对产品的需求，进而驱动产品的设计。在产品运营阶段，通过A/B测试，数据对比，优化产品等等。</p>

<p>后续部分，主要从以下这几个方面介绍我们团队在数据驱动业务方面的实践。
<img src="http://longshen.github.io/media/14487012662534.jpg" alt="" /></p>

<h2>二、基础工具</h2>

<h3>1、数据平台</h3>

<p>数据平台包括数据接收服务、数据仓库（hadoop）、内存计算（hive、Spark）、调度（资源调度、程序调度）等。<strong>它实现支持数据采集、存储、计算这些重要的环节，是数据驱动的基础</strong>。</p>

<h3>2、数据可视化</h3>

<p>将数据库中每一个数据项作为单个图元元素表示，构成大量数据集的图像。常见有折线图、柱状图、饼图。
目前比较流行的有iCharts、d3.js等，而我们团队数据可视化只需要支持一些基础图形便能满足需求，我们选择一个轻巧的开源库<a href="http://www.ichartjs.com/">ichartjs</a>。</p>

<h3>3、监控预警</h3>

<p><strong>数据可视化的工具基本上都是需要主动去查阅的</strong>，当数据分析维度变多，个别维度的数据异常将容易被忽视或者无法被及时发现。<strong>可以加入一些监控预警机制，在预定条件被触发时，被动接收预警</strong>，保证及时发现。比如达到某一阀值时进行邮件预警，严重的进行电话预警。</p>

<h3>4、简化统计脚本</h3>

<p>简化统计脚本对于专业的数据分析人员重要，对于业务人员也非常重要。它使业务人员分析数据门槛降低，让业务人员分析数据成为可能。而业务人员对数据的分析，虽然分析方法上不如专业的数据分析人员，但是<strong>依靠业务人员对业务的深入理解，在问题深入分析定位方面往往比数据分析人员更容易挖掘原因和优化点</strong>。
可以通过对原始数据库进行预处理（分表串表等），提供常用函数（格式转换、分区域、分运营等）等方式，简化新增、修改统计脚本。</p>

<h2>三、数据收集</h2>

<p>即用户使用产品时触发一些统计埋点，生成统计数据，上报到数据平台。不同公司、不同业务，统计埋点、统计上报方式、协议都不相同，以下主要介绍几个重要的细节点。</p>

<h3>1、尽量减少需要依赖、统计时需要串联的统计埋点</h3>

<p>什么是需要依赖、统计时需要串联的统计埋点，比如一次下载过程性能情况的统计，可以简单划分为4个环节，该次下载发起的连接次数、连接成功次数、请求次数、接收数据的次数。统计埋点可以在每个统计环节都做埋点然后各自上报。当要分析时需要把这4个环节的数据进行串联或者统计汇总，才能确定性能情况。
尽量减少需要依赖、统计时需要串联的统计埋点，有以下量点好处</p>

<ul>
<li><p>减少上报数据丢失的影响</p>

<blockquote><p>aa一般项目的数据上报流程无法做到100%数据都上报到统计平台。如果能保证95%有效数据达到，对于需要有4个数据记录进行串联的统计，能使用的有效数据就不到82%。而如果在客户端汇总并指上报一条记录，则能保证有效数据还是95%。</p></blockquote></li>
<li><p>降低统计分析的门槛</p>

<blockquote><p>数据串联建表本身耗时并且繁琐的事情，减少这些事情统计脚本可以精简很多</p></blockquote></li>
</ul>


<h3>2、完善的A/B测试系统</h3>

<p>这个主要涉及功能点数据验证难点及数据收集周期的问题。有A/B测试，能在验证功能的时候，保证尽量少影响用户（同时也增加了验证功能点的可能性）。而完善的A/B测试系统，可以支持同时灰度多种策略/方案，减少数据收集的周期。</p>

<h3>3、任何需求，数据优先</h3>

<p>每一个需求开始设计/实现时，则考虑以下两个问题，提前考虑好需要的埋点。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1、如何验证需求效果，如何统计（如何写统计脚本），需要哪些字段
</span><span class='line'>2、如果效果不理想，如何定位问题（如何写分析脚本），需要哪些字段</span></code></pre></td></tr></table></div></figure>


<p>需求测试时，做好以下两个事情，在版本发布前保证好统计埋点正确性。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1、验证统计埋点数据每个字段的统计时机、字段值是否正确
</span><span class='line'>2、触发上报一批统计数据，使用已写好的脚本进行统计，确认统计结果是否与预期一致</span></code></pre></td></tr></table></div></figure>


<blockquote><p>通常的需求，统计埋点的工作量相对较少。但由于对统计埋点的重视度不够，往往等到发版上线后才进行统计。这时发现缺少某些统计埋点，然后等待下个版本添加。有时甚至需要几个版本迭代才能完成需要的统计埋点。导致那些需要依赖数据进行选择、优化的需求，浪费了几个版本的迭代优化时间。</p></blockquote>

<h2>四、数据分析</h2>

<p>通常的分析步骤如下：
1、确定目标（问题），明确要分析目标或者问题
2、分解，从不同维度去分析
3、评估，根据分析的数据情况，评估某个维度的影响
4、决策，从评估结果决策下一步分解的内容，或者得出结论。
5、不断循环细化分解，执行2~4步，直到得出结论（可能多个结论）。
在2~4步骤中，可以尝试用自问自答的方式，进行分解、评估。<strong>可以借助思维导图工具（Xmind、MindManger）去发散问题，记录分解的维度和评估决策情况。</strong></p>

<blockquote><p>常用的分析方法有对比、聚类、结构、因子、交叉等。
比如在分析错误原因时，更多的使用结构分析方法，列出业务各个流程导致错误的占比，重点分析优化高占比部分。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux间传输文件]]></title>
    <link href="http://longshen.github.io/blog/2015/11/18/sync-file-between-linux/"/>
    <updated>2015-11-18T22:14:45+08:00</updated>
    <id>http://longshen.github.io/blog/2015/11/18/sync-file-between-linux</id>
    <content type="html"><![CDATA[<p>Linux之间传输文件，可以使用scp、rsync等命令进行传输。而具体经常在某两个机器之间进行传输，一般会先增加两台机器间的ssh信任，避免每次都需要输入密码。</p>

<h2>增加ssh信任</h2>

<h3>本地生成ssh_key</h3>

<p>执行<code>ssh-keygen -t rsa</code>，都选择默认（一直回车）
会在/home/UserName/.ssh/目录下生成<strong>id_rsa</strong>和<strong>id_rsa.pub</strong>文件。</p>

<blockquote><p><strong>注：MAC OS会生成在/home/UserName/.ssh/目录下，ssh-keygen会有提示</strong></p></blockquote>

<h3>添加本地ssh_key到远程机器</h3>

<p>拷贝id_rsa.pub里面的信息，添加到远程机器的/home/UserName/.ssh/authorized_keys文件中。</p>

<blockquote><p>如果没有authorized_keys文件，则新建一个。
可以使用scp命令先复制id_rsa.pub到远程机器，再执行<code>cat id\_dsa.pub &gt;&gt; authorized\_keys</code></p></blockquote>

<h2>scp命令</h2>

<p>格式为</p>

<p><code>scp local_file remote_username@remote_ip:remote_folder</code>
<code>scp -r local_folder remote_ip:remote_folder</code></p>

<p>比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> <span class="c">#拷贝远程机器文件aaaa.txt到本地</span>
</span><span class='line'> scp longshen@192.168.116.129:/home/longshen/aaaa.txt /local_path/
</span><span class='line'> <span class="c">#拷贝本地文件aaaa.txt到远程机器</span>
</span><span class='line'> scp /local_path/aaaa.txt longshen@192.168.116.129:/home/longshen/aaaa.txt
</span><span class='line'> <span class="c">#拷贝远程机器remote_folder到本地</span>
</span><span class='line'> scp longshen@192.168.116.129:/home/longshen/remote_folder /local_path/
</span><span class='line'> <span class="c">#拷贝本地文件夹local_folder到远程机器</span>
</span><span class='line'> scp /local_path/local_folder longshen@192.168.116.129:/home/longshen/
</span></code></pre></td></tr></table></div></figure>


<h2>rsync命令</h2>

<p>格式为（可参考<a href="http://blog.chinaunix.net/uid-10362953-id-2961174.html">rsync详解 </a>）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rsync <span class="o">[</span>OPTION<span class="o">]</span>... SRC DEST
</span><span class='line'>rsync <span class="o">[</span>OPTION<span class="o">]</span>... SRC <span class="o">[</span>USER@<span class="o">]</span>HOST:DEST
</span><span class='line'>rsync <span class="o">[</span>OPTION<span class="o">]</span>... <span class="o">[</span>USER@<span class="o">]</span>HOST:SRC DEST
</span><span class='line'>rsync <span class="o">[</span>OPTION<span class="o">]</span>... <span class="o">[</span>USER@<span class="o">]</span>HOST::SRC DEST
</span><span class='line'>rsync <span class="o">[</span>OPTION<span class="o">]</span>... SRC <span class="o">[</span>USER@<span class="o">]</span>HOST::DEST
</span></code></pre></td></tr></table></div></figure>


<p>例如</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rsync -va test_rsync longshen@192.168.116.129:/home/longshen
</span></code></pre></td></tr></table></div></figure>


<h2>scp、rsync区别</h2>

<h3>命令实现的区别</h3>

<p>scp本身还是依赖系统ssh的，rsync是自己开发的一套协议，监听本机873端口</p>

<h3>功能区别</h3>

<ul>
<li>scp是把复制，即文件全部复制过去，当文件修改后还是把所有文件复制过去。</li>
<li>rsync是更新，即第一次是把所有文件同步过去，当文件修改后，只把修改的文件同步过去。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[文件同步工具_Seafile]]></title>
    <link href="http://longshen.github.io/blog/2015/11/16/file-syn-seafile/"/>
    <updated>2015-11-16T22:49:10+08:00</updated>
    <id>http://longshen.github.io/blog/2015/11/16/file-syn-seafile</id>
    <content type="html"><![CDATA[<blockquote><p>项目开发过程，团队成员经常协同编辑同一个文件。普通文档类的，可以使用自建的Confluence、Wordpress等，或者在线服务Worktitle、tower等。而<strong>像excel、思维导图（xmind）等复杂的文档文件</strong>，这些在线编辑协作的工具都未能支持，需要靠同步文件进行协作。</p>

<p>可惜 Dropbox 在国内多次遭屏蔽，而国产的百度云、快盘等产品也不太稳定。为保证协作效率，可以使用Seafile自建云存储平台。</p></blockquote>

<h2>服务器</h2>

<p>直接见<a href="http://www.centoscn.com/CentosServer/ftp/2015/0324/5003.html">Centos部署Seafile开源文件云存储服务器</a></p>

<blockquote><p>记得关闭防火墙</p>

<p><code>/sbin/iptables -I INPUT -p tcp --dport 8000 -j ACCEPT</code>
<code>/sbin/iptables -I INPUT -p tcp --dport 8082 -j ACCEPT</code></p></blockquote>

<h2>客户端</h2>

<p><a href="https://www.seafile.com/download/">Seafile官网下载链接</a></p>

<h2>其他问题</h2>

<h3>服务器宕机，数据如何恢复</h3>

<p>Seafile分两类数据，一类是数据库（用户信息等），一类是资料库数据（用户共享的文件库）。</p>

<p><strong>不备份的影响</strong>
第一类在SeaHub宕机（当然指数据无法恢复那种）后，则丢失了。
第二类有点像git，在客户端会有副本。在SeaHub重新启动后，可以从客户端重新提交。（具体丢失的数据量取决于客户端副本的更新时间）</p>

<p><strong>备份方法</strong>
1、备份数据
（不同路径、mysql账号密码、备份机器IP记得修改）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nv">backup_dir</span><span class="o">=</span><span class="s2">&quot;/usr/local/file/backup_db&quot;</span>
</span><span class='line'><span class="nv">mysqldump_cmd</span><span class="o">=</span><span class="s2">&quot;mysqldump -uroot -p123456 --opt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$mysqldump_cmd</span> ccnet-db &gt; <span class="nv">$backup_dir</span>/ccnet-db.sql.<span class="sb">`</span>date +<span class="s2">&quot;%Y-%m-%d-%H-%M-%S&quot;</span><span class="sb">`</span>
</span><span class='line'><span class="nv">$mysqldump_cmd</span> seafile-db &gt; <span class="nv">$backup_dir</span>/seafile-db.sql.<span class="sb">`</span>date +<span class="s2">&quot;%Y-%m-%d-%H-%M-%S&quot;</span><span class="sb">`</span>
</span><span class='line'><span class="nv">$mysqldump_cmd</span> seahub-db &gt; <span class="nv">$backup_dir</span>/seahub-db.sql.<span class="sb">`</span>date +<span class="s2">&quot;%Y-%m-%d-%H-%M-%S&quot;</span><span class="sb">`</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;backup db success!&quot;</span>
</span><span class='line'>rsync -va . root@10.10.159.176:/usr/local/file/
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;sync data to 10.10.159.176 success!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>2、定时备份==
使用crontab定时执行第1步脚本。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>crontab -e
</span><span class='line'><span class="c">#添加如下执行任务（每天0点0分进行备份）</span>
</span><span class='line'><span class="m">0</span> <span class="m">0</span> * * * /usr/local/file/backup_seafile_data.sh
</span><span class='line'>
</span><span class='line'><span class="c">#重新加载crontab配置</span>
</span><span class='line'>/sbin/service crond reload
</span><span class='line'>
</span><span class='line'><span class="c">#Note: 需要为脚本添加可执行权限，否则定时任务不生效</span>
</span><span class='line'>chmod +x /usr/local/file/backup_seafile_data.sh
</span></code></pre></td></tr></table></div></figure>


<p>rsyc方法参考<a href="http://longshen.github.io/blog/2015/11/18/sync-file-between-linux/">Linux间传输文件</a>
具体备份内容细见<a href="http://manual-cn.seafile.com/maintain/backup_recovery.html">Seafile备份与恢复</a></p>

<h2>参考</h2>

<p><a href="http://manual-cn.seafile.com/index.html">Seafile服务器中文手册</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS X目录说明]]></title>
    <link href="http://longshen.github.io/blog/2015/10/27/mac-directory-detail/"/>
    <updated>2015-10-27T22:55:29+08:00</updated>
    <id>http://longshen.github.io/blog/2015/10/27/mac-directory-detail</id>
    <content type="html"><![CDATA[<h2>一、OS X目录简介</h2>

<p>Mac OS X 10开始，结合了BSD Unix、OpenStep和Mac OS 9的元素。并通过Unix2003认证，成为被认证的Unix系统。所以其目录结构基本符合Unix系统目录结构。
但是有很多目录在Finder中并看不到，这是因为这些目录的被设置了隐藏属性，我们可以在终端窗口中利用unix命令查看。
<img src="http://longshen.github.io/media/14459590294258.jpg" alt="" /></p>

<h2>二、OS X目录结构</h2>

<h3>符合Unix传统的目录</h3>

<p><img src="http://longshen.github.io/media/14459591439786.jpg" alt="" /></p>

<p>Unix传统的各目录存储内容，大概如上图描述（前半部分是目录缩写对应的英文全称，后半部分是该目录的存储内容），就不详细解释了。</p>

<h3>OS X特有的目录</h3>

<p><img src="http://longshen.github.io/media/14459594164710.jpg" alt="" /></p>

<ul>
<li>Application,</li>
</ul>


<h2>三、常用软件所在目录</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用OctoPress]]></title>
    <link href="http://longshen.github.io/blog/2015/10/24/use-octopress/"/>
    <updated>2015-10-24T15:28:35+08:00</updated>
    <id>http://longshen.github.io/blog/2015/10/24/use-octopress</id>
    <content type="html"><![CDATA[<h2>一、搭建OctoPress</h2>

<h3>安装发布</h3>

<p>参考“Coding 4 Fun”blog的<a href="http://c4fun.cn/blog/2013/11/19/hello-octopress/#more">开启OctoPress之旅</a></p>

<h3>更改主题</h3>

<p>安装方法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">cd </span>your_octopress_directory
</span><span class='line'>git clone https://github.com/lijinma/jin.git .themes/jin
</span><span class='line'>rake install<span class="o">[</span><span class="s1">&#39;jin&#39;</span><span class="o">]</span>
</span><span class='line'>rake generate
</span></code></pre></td></tr></table></div></figure>


<p>可在<a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">OctoPress主题列表</a>选择喜欢的主题。</p>

<p><strong>特别注意：先选好主题后，再开始添加插件，</strong>由于很多插件需要修改对应html文件，安装新主题后，需要重新修改。</p>

<h3>评论插件</h3>

<h3>标签插件</h3>

<p>参考<a href="http://codemacro.com/2012/07/18/add-category-list-to-octopress/">为octopress添加分类(category)列表</a></p>

<h2>二、常用命令</h2>

<h3>blog管理</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#新建文章</span>
</span><span class='line'>rake new_post<span class="o">[</span>“new_title”<span class="o">]</span>
</span><span class='line'><span class="c">#生成网站</span>
</span><span class='line'>rake generate
</span><span class='line'><span class="c">#本地预览网站</span>
</span><span class='line'>rake preview
</span><span class='line'><span class="c">#部署</span>
</span><span class='line'>rake deploy
</span></code></pre></td></tr></table></div></figure>


<h3>源码管理</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#git相关命令</span>
</span><span class='line'>git add .
</span><span class='line'>git commit -m <span class="s2">&quot;message&quot;</span>
</span><span class='line'>git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>


<h2>三、常见问题</h2>

<h3>rake命令无法加特殊字符（如“’等）</h3>

<p>常用的命令是<code>rake new_post[“new_title”]</code>。但是在ZSH下，输入时会提示错误：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>zsh: no matches found: new_post<span class="o">[</span>new_title<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们可以用转义符来解决这一问题，但是每次这样操作会特别繁琐。解决方案是在~/.zshrc文件下，加入这样一行内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">alias </span><span class="nv">rake</span><span class="o">=</span><span class="s2">&quot;noglob rake&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>generate出现invalid byte sequence</h3>

<p>MAC或者Windows下运行<code>rake genreate</code>出现invalid byte sequence，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>jekyll 2.5.3 <span class="p">|</span> Error:  invalid byte sequence in US-ASCII
</span></code></pre></td></tr></table></div></figure>


<p>MAC或者Windows默认是使用ASCII编码，需要设置UTF-8编码。解决方案是在~/.zshrc文件下，加入这样两行内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">export </span><span class="nv">LC_ALL</span><span class="o">=</span>zh_CN.UTF-8
</span><span class='line'><span class="nb">export </span><span class="nv">LANG</span><span class="o">=</span>zh_CN.UTF-8
</span></code></pre></td></tr></table></div></figure>


<h3>generate出现Pygments can&rsquo;t parse</h3>

<p>运行<code>rake genreate</code>出现Pygments can&rsquo;t parse错误，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>jekyll 2.5.3 <span class="p">|</span> Error:  Pygments can<span class="err">&#39;</span>t parse unknown language: zsh.
</span></code></pre></td></tr></table></div></figure>


<p>jekyll的语法高亮无法识别zsh语言。是由于编码文章时，使用如下代码块。</p>

<blockquote><p>```zsh<br>
XXX<br>
```</p></blockquote>

<p>最简单的解决方案是，代码块不使用zsh，改为其他语法相近的语言，如sh，bash。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[首篇]]></title>
    <link href="http://longshen.github.io/blog/2015/10/24/first-article/"/>
    <updated>2015-10-24T15:26:30+08:00</updated>
    <id>http://longshen.github.io/blog/2015/10/24/first-article</id>
    <content type="html"><![CDATA[<h3>为什么用OctoPress</h3>

<p>  以前总数是在各种blog网站（比如简书、csdn、cppblog等）注册个人blog，在其限定的框架内编写文章。偶尔遇到某些功能blog框架无法支持便非常不爽。故慢慢的不在blog更新文章，转而都记录到Evernote上，或者团队wiki（Confluence、Wordpress）。</p>

<p>  而Evernote毕竟只是自己查看，团队wiki只有团队的少数人阅读。<strong>一方面不利于分享；另一方面由于缺少读者，导致文章写得随意，总结不够充分深入，不利于自己对知识的吸收和积累；还有人性有强烈的被认可赞同的欲望，Blog、公众号等能驱使自己多总结分享文章。</strong></p>

<p>  前段时间换了MacPro笔记本，想想在Mac下搭个Blog，多写写文章分享出来。于是便发现了OctoPress</p>

<h3>怎么用OctoPress</h3>

<p>发现OctoPress后，第一件事当然是配置环境，搭建起来。然后是查找各种主题、插件等。但琢磨了半天，<em>发现主题再炫，插件再好，如果没有内容，然并卵</em>。故先不把精力放到主题、插件及使用方法上，开始写文章，在使用过程中遇到问题，再研究解决。</p>
]]></content>
  </entry>
  
</feed>
